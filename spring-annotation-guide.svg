<svg viewBox="0 0 1500 2800" xmlns="http://www.w3.org/2000/svg">
  <!-- 배경 -->
  <rect width="1500" height="2800" fill="#f8f9fa"/>
  
  <!-- 제목 -->
  <text x="750" y="50" text-anchor="middle" font-size="32" font-weight="bold" fill="#2c3e50">
    Spring Boot 어노테이션의 마법 🪄
  </text>
  <text x="750" y="85" text-anchor="middle" font-size="18" fill="#7f8c8d">
    @SpringBootApplication과 @ServletComponentScan이 하는 일 완벽 이해
  </text>
  
  <!-- 1. 어노테이션 없을 때 vs 있을 때 비교 -->
  <g transform="translate(50, 120)">
    <rect x="0" y="0" width="1400" height="350" rx="10" fill="#ffffff" stroke="#e1e4e8" stroke-width="2"/>
    <text x="700" y="35" text-anchor="middle" font-size="24" font-weight="bold" fill="#d32f2f">
      어노테이션의 위력: Before vs After
    </text>
    
    <!-- Before (전통적인 방식) -->
    <g transform="translate(50, 60)">
      <rect x="0" y="0" width="600" height="270" rx="5" fill="#ffebee" stroke="#ef5350" stroke-width="2"/>
      <text x="300" y="30" text-anchor="middle" font-size="18" font-weight="bold" fill="#c62828">
        ❌ 어노테이션 없이 (전통적 방식)
      </text>
      
      <text x="20" y="60" font-size="14" fill="#424242">1. web.xml 파일에 서블릿 수동 등록</text>
      <text x="20" y="85" font-size="14" fill="#424242">2. 스프링 설정 XML 파일 작성</text>
      <text x="20" y="110" font-size="14" fill="#424242">3. 톰캣 서버 별도 설치 및 설정</text>
      <text x="20" y="135" font-size="14" fill="#424242">4. WAR 파일로 패키징</text>
      <text x="20" y="160" font-size="14" fill="#424242">5. 톰캣에 WAR 배포</text>
      <text x="20" y="185" font-size="14" fill="#424242">6. 데이터베이스 연결 수동 설정</text>
      <text x="20" y="210" font-size="14" fill="#424242">7. 의존성 수동 관리</text>
      
      <rect x="20" y="230" width="560" height="30" rx="5" fill="#ffcdd2"/>
      <text x="300" y="250" text-anchor="middle" font-size="13" font-weight="bold" fill="#b71c1c">
        📝 수백 줄의 설정 코드 필요!
      </text>
    </g>
    
    <!-- After (Spring Boot) -->
    <g transform="translate(750, 60)">
      <rect x="0" y="0" width="600" height="270" rx="5" fill="#e8f5e9" stroke="#66bb6a" stroke-width="2"/>
      <text x="300" y="30" text-anchor="middle" font-size="18" font-weight="bold" fill="#2e7d32">
        ✅ 어노테이션 사용 (Spring Boot)
      </text>
      
      <rect x="20" y="50" width="560" height="60" rx="5" fill="#263238"/>
      <text x="30" y="75" font-family="monospace" font-size="13" fill="#aed581">@SpringBootApplication</text>
      <text x="30" y="95" font-family="monospace" font-size="13" fill="#aed581">@ServletComponentScan</text>
      
      <text x="300" y="140" text-anchor="middle" font-size="16" font-weight="bold" fill="#388e3c">
        단 2줄로 모든 설정 완료! 🎉
      </text>
      
      <text x="20" y="170" font-size="14" fill="#424242">✓ 서블릿 자동 등록</text>
      <text x="20" y="195" font-size="14" fill="#424242">✓ 스프링 자동 설정</text>
      <text x="20" y="220" font-size="14" fill="#424242">✓ 내장 톰캣 자동 실행</text>
      <text x="20" y="245" font-size="14" fill="#424242">✓ JAR로 간단 실행</text>
    </g>
  </g>
  
  <!-- 2. @SpringBootApplication 분해도 -->
  <g transform="translate(50, 500)">
    <rect x="0" y="0" width="1400" height="500" rx="10" fill="#ffffff" stroke="#e1e4e8" stroke-width="2"/>
    <text x="700" y="35" text-anchor="middle" font-size="24" font-weight="bold" fill="#0969da">
      @SpringBootApplication 분해도
    </text>
    
    <!-- 중앙 어노테이션 -->
    <rect x="550" y="70" width="300" height="50" rx="25" fill="#1976d2"/>
    <text x="700" y="102" text-anchor="middle" font-size="18" font-weight="bold" fill="white">
      @SpringBootApplication
    </text>
    
    <!-- 3개의 하위 어노테이션 -->
    <!-- @Configuration -->
    <g transform="translate(150, 180)">
      <rect x="0" y="0" width="350" height="120" rx="10" fill="#e3f2fd" stroke="#2196f3" stroke-width="2"/>
      <text x="175" y="30" text-anchor="middle" font-size="16" font-weight="bold" fill="#1565c0">
        @Configuration
      </text>
      <text x="175" y="55" text-anchor="middle" font-size="14" fill="#424242">
        "이 클래스가 설정 클래스입니다"
      </text>
      <text x="20" y="80" font-size="12" fill="#616161">• Bean 정의 가능</text>
      <text x="20" y="95" font-size="12" fill="#616161">• 스프링 컨테이너 설정</text>
    </g>
    
    <!-- @EnableAutoConfiguration -->
    <g transform="translate(525, 180)">
      <rect x="0" y="0" width="350" height="120" rx="10" fill="#f3e5f5" stroke="#9c27b0" stroke-width="2"/>
      <text x="175" y="30" text-anchor="middle" font-size="16" font-weight="bold" fill="#6a1b9a">
        @EnableAutoConfiguration
      </text>
      <text x="175" y="55" text-anchor="middle" font-size="14" fill="#424242">
        "필요한 설정을 자동으로 해주세요"
      </text>
      <text x="20" y="80" font-size="12" fill="#616161">• 클래스패스 스캔</text>
      <text x="20" y="95" font-size="12" fill="#616161">• 필요한 Bean 자동 생성</text>
    </g>
    
    <!-- @ComponentScan -->
    <g transform="translate(900, 180)">
      <rect x="0" y="0" width="350" height="120" rx="10" fill="#e8f5e9" stroke="#4caf50" stroke-width="2"/>
      <text x="175" y="30" text-anchor="middle" font-size="16" font-weight="bold" fill="#2e7d32">
        @ComponentScan
      </text>
      <text x="175" y="55" text-anchor="middle" font-size="14" fill="#424242">
        "컴포넌트를 찾아서 등록하세요"
      </text>
      <text x="20" y="80" font-size="12" fill="#616161">• @Component, @Service 스캔</text>
      <text x="20" y="95" font-size="12" fill="#616161">• @Controller, @Repository 스캔</text>
    </g>
    
    <!-- 화살표 -->
    <path d="M 700 120 L 325 180" stroke="#1976d2" stroke-width="2" fill="none" marker-end="url(#arrowblue)"/>
    <path d="M 700 120 L 700 180" stroke="#9c27b0" stroke-width="2" fill="none" marker-end="url(#arrowpurple)"/>
    <path d="M 700 120 L 1075 180" stroke="#4caf50" stroke-width="2" fill="none" marker-end="url(#arrowgreen)"/>
    
    <!-- 실제 동작 설명 -->
    <rect x="150" y="330" width="1100" height="140" rx="10" fill="#fff3e0" stroke="#ff9800" stroke-width="2"/>
    <text x="700" y="360" text-anchor="middle" font-size="16" font-weight="bold" fill="#e65100">
      🎯 실제로 일어나는 일
    </text>
    <text x="180" y="390" font-size="14" fill="#424242">1. 스프링 컨테이너 생성 → 2. 클래스패스 스캔 → 3. 필요한 Bean 자동 생성</text>
    <text x="180" y="415" font-size="14" fill="#424242">4. 내장 톰캣 실행 → 5. 서블릿 컨테이너 초기화 → 6. 포트 8080 리스닝</text>
    <text x="180" y="440" font-size="14" fill="#424242">7. 데이터베이스 연결 → 8. 웹 서버 준비 완료!</text>
  </g>
  
  <!-- 3. @ServletComponentScan 설명 -->
  <g transform="translate(50, 1030)">
    <rect x="0" y="0" width="1400" height="400" rx="10" fill="#ffffff" stroke="#e1e4e8" stroke-width="2"/>
    <text x="700" y="35" text-anchor="middle" font-size="24" font-weight="bold" fill="#0969da">
      @ServletComponentScan의 역할
    </text>
    
    <!-- 중앙 어노테이션 -->
    <rect x="550" y="70" width="300" height="50" rx="25" fill="#ff5722"/>
    <text x="700" y="102" text-anchor="middle" font-size="18" font-weight="bold" fill="white">
      @ServletComponentScan
    </text>
    
    <!-- 스캔 대상들 -->
    <g transform="translate(150, 160)">
      <rect x="0" y="0" width="330" height="100" rx="10" fill="#ffebee" stroke="#ef5350" stroke-width="2"/>
      <text x="165" y="30" text-anchor="middle" font-size="16" font-weight="bold" fill="#c62828">
        @WebServlet
      </text>
      <text x="165" y="55" text-anchor="middle" font-size="13" fill="#424242">
        서블릿 클래스 자동 등록
      </text>
      <text x="20" y="80" font-size="12" fill="#616161">예: @WebServlet("/hello")</text>
    </g>
    
    <g transform="translate(535, 160)">
      <rect x="0" y="0" width="330" height="100" rx="10" fill="#e3f2fd" stroke="#2196f3" stroke-width="2"/>
      <text x="165" y="30" text-anchor="middle" font-size="16" font-weight="bold" fill="#1565c0">
        @WebFilter
      </text>
      <text x="165" y="55" text-anchor="middle" font-size="13" fill="#424242">
        필터 클래스 자동 등록
      </text>
      <text x="20" y="80" font-size="12" fill="#616161">예: @WebFilter("/*")</text>
    </g>
    
    <g transform="translate(920, 160)">
      <rect x="0" y="0" width="330" height="100" rx="10" fill="#e8f5e9" stroke="#4caf50" stroke-width="2"/>
      <text x="165" y="30" text-anchor="middle" font-size="16" font-weight="bold" fill="#2e7d32">
        @WebListener
      </text>
      <text x="165" y="55" text-anchor="middle" font-size="13" fill="#424242">
        리스너 클래스 자동 등록
      </text>
      <text x="20" y="80" font-size="12" fill="#616161">예: ServletContextListener</text>
    </g>
    
    <!-- 화살표 -->
    <path d="M 700 120 L 315 160" stroke="#ff5722" stroke-width="2" fill="none"/>
    <path d="M 700 120 L 700 160" stroke="#ff5722" stroke-width="2" fill="none"/>
    <path d="M 700 120 L 1085 160" stroke="#ff5722" stroke-width="2" fill="none"/>
    
    <!-- 설명 박스 -->
    <rect x="200" y="290" width="1000" height="100" rx="10" fill="#fff3e0"/>
    <text x="700" y="320" text-anchor="middle" font-size="15" font-weight="bold" fill="#e65100">
      💡 이전 방식: web.xml에 수동으로 서블릿 매핑
    </text>
    <text x="220" y="350" font-family="monospace" font-size="12" fill="#424242">
      &lt;servlet&gt;&lt;servlet-name&gt;hello&lt;/servlet-name&gt;&lt;servlet-class&gt;HelloServlet&lt;/servlet-class&gt;&lt;/servlet&gt;
    </text>
    <text x="220" y="370" font-family="monospace" font-size="12" fill="#424242">
      &lt;servlet-mapping&gt;&lt;servlet-name&gt;hello&lt;/servlet-name&gt;&lt;url-pattern&gt;/hello&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;
    </text>
  </g>
  
  <!-- 4. 내장 톰캣과 서블릿 컨테이너 -->
  <g transform="translate(50, 1460)">
    <rect x="0" y="0" width="1400" height="450" rx="10" fill="#ffffff" stroke="#e1e4e8" stroke-width="2"/>
    <text x="700" y="35" text-anchor="middle" font-size="24" font-weight="bold" fill="#0969da">
      내장 톰캣과 서블릿 컨테이너 이해하기
    </text>
    
    <!-- 전통적 방식 -->
    <g transform="translate(100, 70)">
      <text x="250" y="25" text-anchor="middle" font-size="18" font-weight="bold" fill="#d32f2f">
        전통적 방식
      </text>
      
      <!-- 톰캣 서버 -->
      <rect x="50" y="40" width="400" height="150" rx="10" fill="#ffebee" stroke="#ef5350" stroke-width="2"/>
      <text x="250" y="70" text-anchor="middle" font-size="16" font-weight="bold" fill="#c62828">
        별도의 톰캣 서버
      </text>
      
      <!-- WAR 파일 -->
      <rect x="150" y="100" width="200" height="60" rx="5" fill="#ffcdd2"/>
      <text x="250" y="135" text-anchor="middle" font-size="14" fill="#b71c1c">
        WAR 파일 배포
      </text>
      
      <text x="250" y="220" text-anchor="middle" font-size="13" fill="#424242">
        1. 톰캣 설치 → 2. WAR 배포 → 3. 서버 시작
      </text>
    </g>
    
    <!-- Spring Boot 방식 -->
    <g transform="translate(750, 70)">
      <text x="250" y="25" text-anchor="middle" font-size="18" font-weight="bold" fill="#2e7d32">
        Spring Boot 방식
      </text>
      
      <!-- JAR 파일 -->
      <rect x="50" y="40" width="400" height="150" rx="10" fill="#e8f5e9" stroke="#66bb6a" stroke-width="2"/>
      <text x="250" y="70" text-anchor="middle" font-size="16" font-weight="bold" fill="#2e7d32">
        실행 가능한 JAR
      </text>
      
      <!-- 내장 톰캣 -->
      <rect x="150" y="100" width="200" height="60" rx="5" fill="#c8e6c9"/>
      <text x="250" y="130" text-anchor="middle" font-size="14" fill="#1b5e20">
        내장 톰캣 포함
      </text>
      
      <text x="250" y="220" text-anchor="middle" font-size="13" fill="#424242">
        java -jar app.jar 한 줄로 실행!
      </text>
    </g>
    
    <!-- 서블릿 컨테이너 동작 -->
    <rect x="100" y="270" width="1200" height="150" rx="10" fill="#f5f5f5" stroke="#9e9e9e" stroke-width="2"/>
    <text x="700" y="300" text-anchor="middle" font-size="16" font-weight="bold" fill="#424242">
      서블릿 컨테이너의 역할
    </text>
    
    <g transform="translate(150, 320)">
      <rect x="0" y="0" width="200" height="70" rx="5" fill="#e3f2fd"/>
      <text x="100" y="30" text-anchor="middle" font-size="14" font-weight="bold" fill="#1565c0">HTTP 요청 수신</text>
      <text x="100" y="50" text-anchor="middle" font-size="12" fill="#424242">포트 8080 리스닝</text>
    </g>
    
    <text x="370" y="355" font-size="20" fill="#757575">→</text>
    
    <g transform="translate(400, 320)">
      <rect x="0" y="0" width="200" height="70" rx="5" fill="#f3e5f5"/>
      <text x="100" y="30" text-anchor="middle" font-size="14" font-weight="bold" fill="#6a1b9a">서블릿 매핑</text>
      <text x="100" y="50" text-anchor="middle" font-size="12" fill="#424242">URL → 서블릿</text>
    </g>
    
    <text x="620" y="355" font-size="20" fill="#757575">→</text>
    
    <g transform="translate(650, 320)">
      <rect x="0" y="0" width="200" height="70" rx="5" fill="#e8f5e9"/>
      <text x="100" y="30" text-anchor="middle" font-size="14" font-weight="bold" fill="#2e7d32">비즈니스 로직</text>
      <text x="100" y="50" text-anchor="middle" font-size="12" fill="#424242">서블릿 실행</text>
    </g>
    
    <text x="870" y="355" font-size="20" fill="#757575">→</text>
    
    <g transform="translate(900, 320)">
      <rect x="0" y="0" width="200" height="70" rx="5" fill="#fff3e0"/>
      <text x="100" y="30" text-anchor="middle" font-size="14" font-weight="bold" fill="#e65100">HTTP 응답</text>
      <text x="100" y="50" text-anchor="middle" font-size="12" fill="#424242">결과 반환</text>
    </g>
  </g>
  
  <!-- 5. 필수 어노테이션 정리 -->
  <g transform="translate(50, 1940)">
    <rect x="0" y="0" width="1400" height="500" rx="10" fill="#ffffff" stroke="#e1e4e8" stroke-width="2"/>
    <text x="700" y="35" text-anchor="middle" font-size="24" font-weight="bold" fill="#0969da">
      Spring Boot 필수 어노테이션 TOP 10
    </text>
    
    <!-- 클래스 레벨 어노테이션 -->
    <text x="100" y="75" font-size="18" font-weight="bold" fill="#1976d2">클래스 레벨</text>
    
    <g transform="translate(100, 90)">
      <!-- @SpringBootApplication -->
      <rect x="0" y="0" width="280" height="80" rx="5" fill="#e3f2fd" stroke="#2196f3" stroke-width="2"/>
      <text x="140" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#1565c0">@SpringBootApplication</text>
      <text x="140" y="45" text-anchor="middle" font-size="12" fill="#424242">메인 클래스에 필수</text>
      <text x="140" y="60" text-anchor="middle" font-size="11" fill="#757575">자동 설정의 핵심</text>
      
      <!-- @RestController -->
      <rect x="300" y="0" width="280" height="80" rx="5" fill="#f3e5f5" stroke="#9c27b0" stroke-width="2"/>
      <text x="440" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#6a1b9a">@RestController</text>
      <text x="440" y="45" text-anchor="middle" font-size="12" fill="#424242">REST API 컨트롤러</text>
      <text x="440" y="60" text-anchor="middle" font-size="11" fill="#757575">@Controller + @ResponseBody</text>
      
      <!-- @Service -->
      <rect x="600" y="0" width="280" height="80" rx="5" fill="#e8f5e9" stroke="#4caf50" stroke-width="2"/>
      <text x="740" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#2e7d32">@Service</text>
      <text x="740" y="45" text-anchor="middle" font-size="12" fill="#424242">비즈니스 로직 클래스</text>
      <text x="740" y="60" text-anchor="middle" font-size="11" fill="#757575">서비스 계층</text>
      
      <!-- @Repository -->
      <rect x="900" y="0" width="280" height="80" rx="5" fill="#fff3e0" stroke="#ff9800" stroke-width="2"/>
      <text x="1040" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#e65100">@Repository</text>
      <text x="1040" y="45" text-anchor="middle" font-size="12" fill="#424242">데이터 접근 클래스</text>
      <text x="1040" y="60" text-anchor="middle" font-size="11" fill="#757575">DAO/JPA 레포지토리</text>
    </g>
    
    <!-- 메서드 레벨 어노테이션 -->
    <text x="100" y="210" font-size="18" font-weight="bold" fill="#1976d2">메서드 레벨</text>
    
    <g transform="translate(100, 225)">
      <!-- @GetMapping -->
      <rect x="0" y="0" width="280" height="80" rx="5" fill="#e0f2f1" stroke="#009688" stroke-width="2"/>
      <text x="140" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#00695c">@GetMapping</text>
      <text x="140" y="45" text-anchor="middle" font-size="12" fill="#424242">GET 요청 처리</text>
      <text x="140" y="60" text-anchor="middle" font-size="11" fill="#757575">@GetMapping("/users")</text>
      
      <!-- @PostMapping -->
      <rect x="300" y="0" width="280" height="80" rx="5" fill="#fce4ec" stroke="#e91e63" stroke-width="2"/>
      <text x="440" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#c2185b">@PostMapping</text>
      <text x="440" y="45" text-anchor="middle" font-size="12" fill="#424242">POST 요청 처리</text>
      <text x="440" y="60" text-anchor="middle" font-size="11" fill="#757575">데이터 생성</text>
      
      <!-- @RequestMapping -->
      <rect x="600" y="0" width="280" height="80" rx="5" fill="#e1f5fe" stroke="#03a9f4" stroke-width="2"/>
      <text x="740" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#01579b">@RequestMapping</text>
      <text x="740" y="45" text-anchor="middle" font-size="12" fill="#424242">모든 HTTP 메서드</text>
      <text x="740" y="60" text-anchor="middle" font-size="11" fill="#757575">범용 매핑</text>
    </g>
    
    <!-- 필드/파라미터 레벨 어노테이션 -->
    <text x="100" y="345" font-size="18" font-weight="bold" fill="#1976d2">필드/파라미터 레벨</text>
    
    <g transform="translate(100, 360)">
      <!-- @Autowired -->
      <rect x="0" y="0" width="280" height="80" rx="5" fill="#ffebee" stroke="#ef5350" stroke-width="2"/>
      <text x="140" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#c62828">@Autowired</text>
      <text x="140" y="45" text-anchor="middle" font-size="12" fill="#424242">의존성 자동 주입</text>
      <text x="140" y="60" text-anchor="middle" font-size="11" fill="#757575">Spring DI 핵심</text>
      
      <!-- @RequestParam -->
      <rect x="300" y="0" width="280" height="80" rx="5" fill="#ede7f6" stroke="#673ab7" stroke-width="2"/>
      <text x="440" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#4527a0">@RequestParam</text>
      <text x="440" y="45" text-anchor="middle" font-size="12" fill="#424242">쿼리 파라미터</text>
      <text x="440" y="60" text-anchor="middle" font-size="11" fill="#757575">?name=value</text>
      
      <!-- @PathVariable -->
      <rect x="600" y="0" width="280" height="80" rx="5" fill="#f1f8e9" stroke="#8bc34a" stroke-width="2"/>
      <text x="740" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#558b2f">@PathVariable</text>
      <text x="740" y="45" text-anchor="middle" font-size="12" fill="#424242">경로 변수</text>
      <text x="740" y="60" text-anchor="middle" font-size="11" fill="#757575">/users/{id}</text>
    </g>
  </g>
  
  <!-- 6. 실행 흐름도 -->
  <g transform="translate(50, 2470)">
    <rect x="0" y="0" width="1400" height="280" rx="10" fill="#d4edda" stroke="#28a745" stroke-width="3"/>
    <text x="700" y="40" text-anchor="middle" font-size="24" font-weight="bold" fill="#155724">
      🚀 Spring Boot 애플리케이션 실행 흐름
    </text>
    
    <g transform="translate(100, 80)">
      <!-- Step 1 -->
      <rect x="0" y="0" width="200" height="100" rx="10" fill="#ffffff" stroke="#28a745" stroke-width="2"/>
      <text x="100" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#155724">1. main() 실행</text>
      <text x="100" y="45" text-anchor="middle" font-size="11" fill="#424242">SpringApplication</text>
      <text x="100" y="60" text-anchor="middle" font-size="11" fill="#424242">.run() 호출</text>
      
      <text x="220" y="50" font-size="24" fill="#28a745">→</text>
      
      <!-- Step 2 -->
      <rect x="250" y="0" width="200" height="100" rx="10" fill="#ffffff" stroke="#28a745" stroke-width="2"/>
      <text x="350" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#155724">2. 스프링 컨테이너</text>
      <text x="350" y="45" text-anchor="middle" font-size="11" fill="#424242">ApplicationContext</text>
      <text x="350" y="60" text-anchor="middle" font-size="11" fill="#424242">생성</text>
      
      <text x="470" y="50" font-size="24" fill="#28a745">→</text>
      
      <!-- Step 3 -->
      <rect x="500" y="0" width="200" height="100" rx="10" fill="#ffffff" stroke="#28a745" stroke-width="2"/>
      <text x="600" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#155724">3. 컴포넌트 스캔</text>
      <text x="600" y="45" text-anchor="middle" font-size="11" fill="#424242">@Component</text>
      <text x="600" y="60" text-anchor="middle" font-size="11" fill="#424242">Bean 등록</text>
      
      <text x="720" y="50" font-size="24" fill="#28a745">→</text>
      
      <!-- Step 4 -->
      <rect x="750" y="0" width="200" height="100" rx="10" fill="#ffffff" stroke="#28a745" stroke-width="2"/>
      <text x="850" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#155724">4. 내장 톰캣 시작</text>
      <text x="850" y="45" text-anchor="middle" font-size="11" fill="#424242">포트 8080</text>
      <text x="850" y="60" text-anchor="middle" font-size="11" fill="#424242">서블릿 컨테이너</text>
      
      <text x="970" y="50" font-size="24" fill="#28a745">→</text>
      
      <!-- Step 5 -->
      <rect x="1000" y="0" width="200" height="100" rx="10" fill="#ffffff" stroke="#28a745" stroke-width="2"/>
      <text x="1100" y="25" text-anchor="middle" font-size="14" font-weight="bold" fill="#155724">5. 준비 완료!</text>
      <text x="1100" y="45" text-anchor="middle" font-size="11" fill="#424242">HTTP 요청</text>
      <text x="1100" y="60" text-anchor="middle" font-size="11" fill="#424242">대기 중</text>
    </g>
    
    <rect x="200" y="200" width="1000" height="50" rx="25" fill="#4caf50"/>
    <text x="700" y="232" text-anchor="middle" font-size="18" font-weight="bold" fill="white">
      ✨ 모든 과정이 @SpringBootApplication 하나로 자동 처리!
    </text>
  </g>
  
  <!-- 화살표 마커 정의 -->
  <defs>
    <marker id="arrowblue" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
      <path d="M0,0 L0,6 L9,3 z" fill="#1976d2"/>
    </marker>
    <marker id="arrowpurple" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
      <path d="M0,0 L0,6 L9,3 z" fill="#9c27b0"/>
    </marker>
    <marker id="arrowgreen" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
      <path d="M0,0 L0,6 L9,3 z" fill="#4caf50"/>
    </marker>
  </defs>
</svg>